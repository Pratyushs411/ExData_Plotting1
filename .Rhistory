x <-rchisq(n,df[1])
y<-rchisq(n,df[2])
z<-rchisq(n,df[3])
hist(x,col = "red")
hist(x,col = "red")
hist(y,col = "blue")
hist(z,col = "green")
n=100
df = c(2,10,25)
x <-rchisq(n,df[1])
y<-rchisq(n,df[2])
z<-rchisq(n,df[3])
par(mfrow=c(3, 1))
hist(x,col = "red")
hist(y,col = "blue")
hist(z,col = "green")
mean(x)
mean(x)
mean(y)
mean(z)
mean(x)
variance(x)
mean(x)
var(x)
mean(y)
var(y)
mean(z)
var(y)
set.seed(123) # For reproducibility
MARKS <- data.frame(
SUB1 = sample(50:100, 20, replace = TRUE),
SUB2 = sample(50:100, 20, replace = TRUE),
SUB3 = sample(50:100, 20, replace = TRUE)
)
print(MARKS)
#To find total marks of each students.
total_marks <- apply(MARKS, 1, sum)  # Sum across rows (1 means rows)
print(total_marks)
MARKS$Total <- total_marks
print(MARKS)
st.err <- function(x) {
return(sd(x) / sqrt(length(x)))
}
se_SUB1 <- st.err(MARKS$SUB1)
se_SUB2 <- st.err(MARKS$SUB2)
se_SUB3 <- st.err(MARKS$SUB3)
cat("Standard Error for SUB1: ", se_SUB1, "\n")
cat("Standard Error for SUB2: ", se_SUB2, "\n")
cat("Standard Error for SUB3: ", se_SUB3, "\n")
MARKS[, c("SUB1", "SUB2", "SUB3")] <- apply(MARKS[, c("SUB1", "SUB2", "SUB3")], 2, function(x) x + 0.25)
print(MARKS)
V1 <- MARKS$SUB1
V2 <- MARKS$SUB2
V3 <- MARKS$SUB3
marks_list <- list(V1, V2, V3)  # Combine the vectors into a list
sum_marks <- lapply(marks_list, sum)
print(sum_marks)
# Create vectors V1, V2, and V3 from SUB1, SUB2, and SUB3
V1 <- MARKS$SUB1
V2 <- MARKS$SUB2
V3 <- MARKS$SUB3
TOTAL_SUM <- sapply(list(V1, V2, V3), sum)
print(TOTAL_SUM)
V1 <- MARKS$SUB1
V2 <- MARKS$SUB2
V3 <- MARKS$SUB3
squared_values <- sapply(list(V1, V2, V3), function(x) x^2)
print(squared_values)
I <- c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4)
MARKS$I <- I
print(MARKS)
mean_SUB1 <- tapply(MARKS$SUB1, MARKS$I, mean)
print("Mean of SUB1 based on index I:")
print(mean_SUB1)
sd_SUB1 <- tapply(MARKS$SUB1, MARKS$I, sd)
print("Standard Deviation of SUB1 based on index I:")
print(sd_SUB1)
f <- function(x, y) {
return(x / y)
}
V1 <- MARKS$SUB1
V2 <- MARKS$SUB2
result <- mapply(f, V1, V2)
print(result)
mean_values <- apply(Seatbelts, 2, mean)
print(mean_values)
# Find the sum of each row (for each month)
row_sums <- apply(Seatbelts, 1, sum)
print(row_sums)
# Find the minimum value for each variable (column) using lapply
min_values <- lapply(as.data.frame(Seatbelts), min)
print(min_values)
max_values <- sapply(as.data.frame(Seatbelts), max)
print(max_values)
years <- factor(floor(time(Seatbelts)))
# Calculate the mean number of drivers killed per year
drivers_killed_per_year <- tapply(Seatbelts[, "drivers"], years, mean)
print(drivers_killed_per_year)
# Create a function to calculate the ratio of front to rear passengers
ratio_function <- function(front, rear) {
return(front / rear)
}
# Calculate the ratio of front seat passengers to rear seat passengers for each month
front_to_rear_ratio <- mapply(ratio_function, Seatbelts[, "front"], Seatbelts[, "rear"])
print(front_to_rear_ratio)
n<-5
if(n<0){
print("number less than 0")
}else if(n==0){
print(0)
}else{
a<-1
for(x in 1:n){
a<-a*x
}
print(a)
}
download.file("https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/ex12_normalized_intensities.csv", "ex12_normalized_intensities.csv", method="curl")
install.packages("ggplot2")
# Load required libraries
library(ggplot2)
library(dplyr)
# Load the dataset
url <- "https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/ex12_normalized_intensities.csv"
project1 <- read.csv(url, row.names = 1)
# View the data structure to check the first few rows
head(project1)
ggplot(project1, aes(x = sampleB, y = sampleH)) +
geom_point() + labs(x = "Gene Expression in SampleB", y = "Gene Expression in SampleH") + theme_minimal()
project1$expr_limits <- ifelse(project1$sampleB > 13 & project1$sampleH > 13, "high",
ifelse(project1$sampleB < 6 & project1$sampleH < 6, "low", "normal"))
# View the updated data frame
head(project1)
# Scatter plot with color based on "expr_limits"
p <- ggplot(project1, aes(x = sampleB, y = sampleH, color = expr_limits)) +
geom_point() +
labs(x = "Gene Expression in SampleB", y = "Gene Expression in SampleH") +
theme_minimal()
# Display the plot
print(p)
# Reshape the data into long format for boxplot
project1_long <- project1 %>%
gather(key = "sample", value = "expression", -expr_limits)
install.packages("tidyr")
library(tidyr)
# Reshape the data into long format for boxplot
project1_long <- project1 %>%
gather(key = "sample", value = "expression", -expr_limits)
# Boxplot of all samples
ggplot(project1_long, aes(x = sample, y = expression)) +
geom_boxplot() +
labs(x = "Samples", y = "Gene Expression") +
theme_minimal()
# Boxplot of expression by "expr_limits"
ggplot(project1_long, aes(x = sample, y = expression, fill = expr_limits)) +
geom_boxplot() +
labs(x = "Samples", y = "Gene Expression", fill = "Expression Level") +
theme_minimal()
expr_limits_count <- table(project1$expr_limits)
# Bar plot of low/normal/high genes
ggplot(data.frame(expr_limits = names(expr_limits_count), count = as.vector(expr_limits_count)), aes(x = expr_limits, y = count, fill = expr_limits)) +
geom_bar(stat = "identity") +
labs(x = "Expression Level", y = "Count of Genes") +
theme_minimal()
# Count the number of genes in each category
expr_limits_count <- table(project1$expr_limits)
# Bar plot of low/normal/high genes
ggplot(data.frame(expr_limits = names(expr_limits_count),
count = as.vector(expr_limits_count)), aes(x = expr_limits, y = count, fill = expr_limits)) +
geom_bar(stat = "identity") +
labs(x = "Expression Level", y = "Count of Genes") +
theme_minimal()
# Bar plot of low/normal/high genes
ggplot(data.frame(expr_limits = names(expr_limits_count),
count = as.vector(expr_limits_count)), aes(x = expr_limits, y = count, fill = expr_limits)) +
geom_bar(stat = "identity") +
labs(x = "Expression Level", y = "Count of Genes") +
theme_minimal()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) {
m <<- inverse
}
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
data$read.csv(file.choose())
data=read.csv(file.choose())
data
data=read.csv(file.choose())
data
dim(data)
head(data,10)
data=read.csv(file.choose())
dim(data)
head(data,10)
popmean = mean(data$Wall.Thickness)
hist(data$Wall.Thickness,col="Blue")
abline(v=popmean,col="red")
s50 = c()
n = 9000
for(i in 1:n){
s50[i] = mean(sample(data$Wall.Thickness,50,replace =T))
}
hist(s50)
s500 = c()
n=9000
for(i in 1:n){
s500[i] = mean(sample(data$Wall.Thickness,500,replace = T))
}
hist(s500)
s9000 = c()
n=9000
for(i in 1:n){
s9000[i] = mean(sample(data$Wall.Thickness,9000,replace = T))
}
hist(s9000)
x = c(58,69,43,39,63,52,47,31,74,36)
y = c(189,235,193,177,154,191,213,165,198,181)
plot(x,y,xlab="Age",ylab="cholestrol",main="cholestrol vs age",col="blue")
abline(lm(y-x),col="red")
plot(x,y,xlab="Age",ylab="cholestrol",main="cholestrol vs age",col="blue")
abline(lm(y~x),col="red")
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
swirl()
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),replacement = FALSE,prob = c(0.3, 0.7))
flips<-sample(c(0,1),prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
>rbinom
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois()
rpois(5)
rpois(5,mean = 10)
rpois(5,10)
replicate(100, rpois(5, 10)->my_pois
replicate(100, rpois(5, 10))->my_pois
my_pois
cm<-=colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
data(cars)
help(cars)
head()
head(cars)
plot(cars)
help("plot")
help(plot)
plot()
plot(cars)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed,xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stopping Distance",main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, subtitle = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars,col = 2)
plot(cars,xlim = c(10, 15))
plot(cars,pch = 2)
data(mtcars)
help(boxplot)
boxplot(mtcars,formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars)
hist(mtcars$mpg)
packageVersion("swirl")
library(swirl)
swirl()
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim
dim(pollution)
summary(pollution$pm25)
summary(pollution$ppm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm,col="blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green",breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12,lwd = 2)
abline(v = median(ppm),lwd = 4,col = "magenta")
abline(v = median(ppm),col = "magenta",lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
# Example histograms
hist(high, col="blue", main="High Pollution Data")
hist(low, col="green", main="Low Pollution Data")
east <- subset(pollution,region=="east") at the command prompt.
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(west$latitude, west$pm25, main = "East")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars,speed,dist)
with(cars, plot(speed, dist))
with(cars, plot(mean(cars$speed), max(cars$dist)))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(states$region)
table(state$region)
wef
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone
hist(airquality$Ozone)
table(irquality$Month)
table(airquality$Month)
boxplot(Ozone ~ Month, data = airquality, main = "Ozone Levels by Month",xlab = "Month",ylab = "Ozone (ppb)",col = "lightblue")
boxplot(Ozone~Month, airquality)
boxplot(Ozone ~ Month, data = airquality,
main = "Ozone Levels by Month",
xlab = "Month",
ylab = "Ozone (ppb)",
col = "lightblue",
col.axis = "blue",
col.lab = "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,data=airquality,xlab="Month",ylab="Ozone(ppb)",col.axis="blue",col.lab="red",na.action = na.omit)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
length(par())
length(par())
names(par())
names(par())
par()$pin
par("fg")
par("fg")
par()$pch
par("lty")
par("lty")
plot(airquality$Wind, type="n",airquality$Ozone)
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature").
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
# Load Data
data <- read.table("./data/household_power_consumption.txt", header = TRUE, sep = ";", na = "?", colClasses = c(rep("character", 2), rep("numeric", 7)))
# Load Data
data <- read.table("./household_power_consumption.txt", header = TRUE, sep = ";", na = "?", colClasses = c(rep("character", 2), rep("numeric", 7)))
# Load Data
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na = "?", colClasses = c(rep("character", 2), rep("numeric", 7)))
getwd()
setwd("/Users/pratyush/Downloads/datascience")
getwd()
# Load Data
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na = "?", colClasses = c(rep("character", 2), rep("numeric", 7)))
# Subset data for the specific dates
data <- data[data$Date == "1/2/2007" | data$Date == "2/2/2007", ]
# Create a DateTime column by combining Date and Time
data$DateTime <- as.POSIXct(paste(data$Date, data$Time), format = "%d/%m/%Y %H:%M:%S")
# Reset row names (optional but keeps it clean)
rownames(data) <- 1:nrow(data)
# Reorganize columns
data <- cbind(data[, "DateTime"], data[, 3:9])
colnames(data)[1] <- "Date_time"  # Rename the DateTime column
# Write data to CSV (optional)
write.csv(data, file = "PowerConsumption.csv", row.names = FALSE)
# Create and save the plot
png(filename = "Plot1.png", width = 480, height = 480, units = "px")
hist(data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)", breaks = 12, ylim = c(0, 1200))
dev.off()
# Clean up
rm(data)
# Read the raw data
data <- read.table(".household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c(rep("character", 2), rep("numeric", 7)))
# Read the raw data
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c(rep("character", 2), rep("numeric", 7)))
# Subset data for the specific dates
data <- data[data$Date == "1/2/2007" | data$Date == "2/2/2007", ]
# Create a DateTime column by combining Date and Time
data$DateTime <- as.POSIXct(paste(data$Date, data$Time), format = "%d/%m/%Y %H:%M:%S")
# Reorganize columns: put DateTime as the first column
data <- cbind(Date_time = data$DateTime, data[, 3:9])
# Write processed data to CSV for future use
write.csv(data, file = "./data/PowerConsumption.csv", row.names = FALSE)
summary(data$Global_active_power)
